<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_LPCXpresso55S16" name="LPCXpresso55S16" brief="This is SDK version 2.8.2 manifest file. It describes the content of the LPCXpresso55S16 and additional settings for tools that support SDK version 2.8.2" format_version="3.6" api_version="2.0.0" configuration="04c5dd7e08761491f59199d7c4364fcf" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.6.xsd">
  <!--Timestamp (UTC): 2020-09-23 09:35:54.077267-->
  <!--This manifest is generated based on sdk repo commit: 60475d31bf67266eef97c59a3859a1437273841b-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso282" name="MCUXpresso282" version="2.8.2" revision="376 2020-08-19"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings/>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.2.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
  </toolchains>
  <boards>
    <board id="lpcxpresso55s16" name="LPCXpresso55S16" href="https://www.nxp.com/pip/LPC55S16-EVK" version="1.0.0" package="LPC55S16JBD100">
      <description>LPCXpresso Development Board for LPC55S1x/1x family of MCUs</description>
      <image path="MIR/marketing_data/1.0/boards/images" type="image">
        <files mask="157-LPC55S16-EVK-v4.png"/>
      </image>
      <examples>
        <example id="lpcxpresso55s16_anactrl_measure_frequency" name="anactrl_measure_frequency" brief="The anactrl_measure_frequency Example project is to demonstrate usage of the KSDK anactrl driver. In the example, you can set a reference clock and target clock. The project will calculate the frequency of the target clock according to the reference clock frequency." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/anactrl" path="boards/lpcxpresso55s16/driver_examples/anactrl/measure_frequency">
          <external path="boards/lpcxpresso55s16/driver_examples/anactrl/measure_frequency" type="xml">
            <files mask="anactrl_measure_frequency.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_casper" name="casper" brief="The CASPER Example project is a demonstration program that uses the KSDK software to calculate RSA." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/casper">
          <external path="boards/lpcxpresso55s16/driver_examples/casper" type="xml">
            <files mask="casper.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/cmp/interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/cmp/polling">
          <external path="boards/lpcxpresso55s16/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_i2c_dma_b2b_transfer_master" name="cmsis_i2c_dma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/dma_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_i2c_dma_b2b_transfer_slave" name="cmsis_i2c_dma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_i2c_int_b2b_transfer_master" name="cmsis_i2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_i2c_int_b2b_transfer_slave" name="cmsis_i2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_spi_dma_b2b_transfer_master" name="cmsis_spi_dma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_dma_b2b_transfer_master example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/spi" path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/dma_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="cmsis_spi_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_spi_dma_b2b_transfer_slave" name="cmsis_spi_dma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_dma_b2b_transfer_slave example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/spi" path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/dma_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_spi_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_spi_int_b2b_transfer_master" name="cmsis_spi_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_interrupt_b2b_transfer_master example shows how to use CMSIS spi driver as master to do board to board transfer with interrupt:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/spi" path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/int_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_spi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_spi_int_b2b_transfer_slave" name="cmsis_spi_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_interrupt_b2b_transfer_slave example shows how to use CMSIS spi driver as master to do board to board transfer with interrupt:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/spi" path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/int_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/spi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_spi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_usart_dma_transfer" name="cmsis_usart_dma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/usart" path="boards/lpcxpresso55s16/cmsis_driver_examples/usart/dma_transfer">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/usart/dma_transfer" type="xml">
            <files mask="cmsis_usart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cmsis_usart_interrupt_transfer" name="cmsis_usart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/usart" path="boards/lpcxpresso55s16/cmsis_driver_examples/usart/interrupt_transfer">
          <external path="boards/lpcxpresso55s16/cmsis_driver_examples/usart/interrupt_transfer" type="xml">
            <files mask="cmsis_usart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/crc">
          <external path="boards/lpcxpresso55s16/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_ctimer_match_example" name="ctimer_match_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ctimer" path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_match">
          <external path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_match" type="xml">
            <files mask="ctimer_match_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_ctimer_match_interrupt_example" name="ctimer_match_interrupt_example" brief="The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ctimer" path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_match_interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_match_interrupt" type="xml">
            <files mask="ctimer_match_interrupt_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_ctimer_pwm_example" name="ctimer_pwm_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ctimer" path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_pwm">
          <external path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_pwm" type="xml">
            <files mask="ctimer_pwm_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_ctimer_pwm_interrupt_example" name="ctimer_pwm_interrupt_example" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ctimer" path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_pwm_interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/ctimer/simple_pwm_interrupt" type="xml">
            <files mask="ctimer_pwm_interrupt_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_cwt" name="cwt" brief="The CWT Example project is a demonstration program that uses the KSDK software to show funcionality of Code Watchdog Timer." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/cwt">
          <external path="boards/lpcxpresso55s16/driver_examples/cwt" type="xml">
            <files mask="cwt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_dma_channel_chain" name="dma_channel_chain" brief="The DMA channel chain example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the DMA channel chain feature." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dma" path="boards/lpcxpresso55s16/driver_examples/dma/channel_chain">
          <external path="boards/lpcxpresso55s16/driver_examples/dma/channel_chain" type="xml">
            <files mask="dma_channel_chain.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_dma_interleave_transfer" name="dma_interleave_transfer" brief="The DMA interleave transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA interleave feature." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dma" path="boards/lpcxpresso55s16/driver_examples/dma/interleave_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/dma/interleave_transfer" type="xml">
            <files mask="dma_interleave_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_dma_linked_transfer" name="dma_linked_transfer" brief="The DMA linked transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a linked trnasfer example." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dma" path="boards/lpcxpresso55s16/driver_examples/dma/linked_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/dma/linked_transfer" type="xml">
            <files mask="dma_linked_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dma" path="boards/lpcxpresso55s16/driver_examples/dma/memory_to_memory">
          <external path="boards/lpcxpresso55s16/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_dma_wrap_transfer" name="dma_wrap_transfer" brief="The DMA wrap transfer example is a simple demonstration program that uses the SDK software.It executes a wrap transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA wrap feature." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dma" path="boards/lpcxpresso55s16/driver_examples/dma/wrap_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/dma/wrap_transfer" type="xml">
            <files mask="dma_wrap_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_flashiap1" name="flashiap1" brief="The FLASIAP project is a simple demonstration program of the SDK FLASIAP driver. It erases and programs a portion of on-chip flash memory. A message a printed on the UART terminal as various operations on flash memory are performed." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/flashiap">
          <external path="boards/lpcxpresso55s16/driver_examples/flashiap" type="xml">
            <files mask="flashiap1.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_gint" name="gint" brief="This example shows how to use SDK drivers to use the Group GPIO input interrupt peripheral." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/gint">
          <external path="boards/lpcxpresso55s16/driver_examples/gint" type="xml">
            <files mask="gint.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle)." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/lpcxpresso55s16/driver_examples/gpio/led_output">
          <external path="boards/lpcxpresso55s16/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_hashcrypt" name="hashcrypt" brief="The hashcrypt Example project is a demonstration program that uses the KSDK software to encrypt and hash data with hardware acceleration." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/lpcxpresso55s16/driver_examples/hashcrypt">
          <external path="boards/lpcxpresso55s16/driver_examples/hashcrypt" type="xml">
            <files mask="hashcrypt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/lpcxpresso55s16/demo_apps/hello_world">
          <external path="boards/lpcxpresso55s16/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_hello_world_ns" name="hello_world_ns" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. This demo application also utilizes TrustZone, so it demonstrates basic techniques for TrustZone applications development. This is non-secure part of the application." toolchain="armgcc" compiler="compiler_gcc" category="trustzone_examples" linked_projects="lpcxpresso55s16_hello_world_s" path="boards/lpcxpresso55s16/trustzone_examples/hello_world/hello_world_ns">
          <external path="boards/lpcxpresso55s16/trustzone_examples/hello_world/hello_world_ns" type="xml">
            <files mask="hello_world_ns.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_hello_world_s" name="hello_world_s" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. This demo application also utilizes TrustZone, so it demonstrates basic techniques for TrustZone applications development. This is secure part of the application." toolchain="armgcc" compiler="compiler_gcc" category="trustzone_examples" linked_projects="lpcxpresso55s16_hello_world_ns" path="boards/lpcxpresso55s16/trustzone_examples/hello_world/hello_world_s">
          <external path="boards/lpcxpresso55s16/trustzone_examples/hello_world/hello_world_s" type="xml">
            <files mask="hello_world_s.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_hello_world_swo" name="hello_world_swo" brief="The Hello World SWO demo prints the &quot;SWO: Hello World&quot; string to the SWO viewer. The purpose of this demo is to show how to use the swo, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/lpcxpresso55s16/demo_apps/hello_world_swo">
          <external path="boards/lpcxpresso55s16/demo_apps/hello_world_swo" type="xml">
            <files mask="hello_world_swo.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_dma_b2b_transfer_master" name="i2c_dma_b2b_transfer_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/dma_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="i2c_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_dma_b2b_transfer_slave" name="i2c_dma_b2b_transfer_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="i2c_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_polling_b2b_master" name="i2c_polling_b2b_master" brief="The i2c_polling_b2b_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/polling_b2b/master">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/polling_b2b/master" type="xml">
            <files mask="i2c_polling_b2b_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_polling_b2b_slave" name="i2c_polling_b2b_slave" brief="The i2c_polling_b2b_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/polling_b2b/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/polling_b2b/slave" type="xml">
            <files mask="i2c_polling_b2b_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/lpcxpresso55s16/driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2s_dma_transfer" name="i2s_dma_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2s" path="boards/lpcxpresso55s16/driver_examples/i2s/dma_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/i2s/dma_transfer" type="xml">
            <files mask="i2s_dma_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_i2s_interrupt_transfer" name="i2s_interrupt_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2s" path="boards/lpcxpresso55s16/driver_examples/i2s/interrupt_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/i2s/interrupt_transfer" type="xml">
            <files mask="i2s_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/lpcxpresso55s16/demo_apps/led_blinky">
          <external path="boards/lpcxpresso55s16/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_lpadc_dma" name="lpadc_dma" brief="The lpdc_dma example shows how to use ADC to trigger a DMA transfer. In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC's sample input. When running the project, typing any key into debug console would trigger the conversion, the software trigger API is called to start the conversion. When the ADC conversion is completed, it would trigger the DMA in ping-pong transfer mode to move the ADC conversion result from ADC conversion data register to user indicated memory. Then the main loop waits for the transfer to be done and print the result to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="boards/lpcxpresso55s16/driver_examples/lpadc/dma">
          <external path="boards/lpcxpresso55s16/driver_examples/lpadc/dma" type="xml">
            <files mask="lpadc_dma.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_lpadc_interrupt" name="lpadc_interrupt" brief="The lpdc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="boards/lpcxpresso55s16/driver_examples/lpadc/interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/lpadc/interrupt" type="xml">
            <files mask="lpadc_interrupt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_lpadc_polling" name="lpadc_polling" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="boards/lpcxpresso55s16/driver_examples/lpadc/polling">
          <external path="boards/lpcxpresso55s16/driver_examples/lpadc/polling" type="xml">
            <files mask="lpadc_polling.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_lpadc_temperature_measurement" name="lpadc_temperature_measurement" brief="The lpadc_temperature_measurement example shows how to measure the temperature within the internal sensor. In this example, the ADC input channel is mapped to an internal temperature sensor. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value. In ADC ISR, the watermark flag would be cleared by reading the conversion result value. When the conversion done, two valid result will be put in the FIFO, then the temperature can be calculated within the two results and a specific formula." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="boards/lpcxpresso55s16/driver_examples/lpadc/temperature_measurement">
          <external path="boards/lpcxpresso55s16/driver_examples/lpadc/temperature_measurement" type="xml">
            <files mask="lpadc_temperature_measurement.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_mcan_interrupt_transfer" name="mcan_interrupt_transfer" brief="The mcan_interrupt example shows how to use MCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when users press space key in terminal. Endpoint B receives the message, printsthe message content to terminal and echoes back the message. Endpoint A will increase the receivedmessage and wait for the next transmission the users initiate." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mcan" path="boards/lpcxpresso55s16/driver_examples/mcan/interrupt_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/mcan/interrupt_transfer" type="xml">
            <files mask="mcan_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_mcan_loopback" name="mcan_loopback" brief="The mcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrate this example, only one board is needed. The example will config Tx Buffer to sendand Rx Fifo to receive. After that, the example will send a CAN Message throuth internal loopbackinterconnect and print out the Message payload to the terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mcan" path="boards/lpcxpresso55s16/driver_examples/mcan/loopback">
          <external path="boards/lpcxpresso55s16/driver_examples/mcan/loopback" type="xml">
            <files mask="mcan_loopback.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_mrt_example" name="mrt_example" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mrt" path="boards/lpcxpresso55s16/driver_examples/mrt">
          <external path="boards/lpcxpresso55s16/driver_examples/mrt" type="xml">
            <files mask="mrt_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_ostimer_example" name="ostimer_example" brief="The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ostimer" path="boards/lpcxpresso55s16/driver_examples/ostimer">
          <external path="boards/lpcxpresso55s16/driver_examples/ostimer" type="xml">
            <files mask="ostimer_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_pint_pattern_match" name="pint_pattern_match" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pint" path="boards/lpcxpresso55s16/driver_examples/pint/pattern_match">
          <external path="boards/lpcxpresso55s16/driver_examples/pint/pattern_match" type="xml">
            <files mask="pint_pattern_match.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_pint_pin_interrupt" name="pint_pin_interrupt" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pint" path="boards/lpcxpresso55s16/driver_examples/pint/pin_interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/pint/pin_interrupt" type="xml">
            <files mask="pint_pin_interrupt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_power_manager_lpc" name="power_manager_lpc" brief="The power_manager_lpc application shows the usage of normal power mode control APIs for entering the three kinds of low power mode: Sleep mode, Deep Sleep mode and Sleep Power Down mode. When the application runs to each low power mode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event.&#10;Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 鈥?Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 鈥?Configure GPIO pins as outputs using the GPIO DIR register. 鈥?Write 1 to the GPIO CLR register to drive the outputs LOW. 鈥?All peripherals disabled." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/lpcxpresso55s16/demo_apps/power_manager_lpc">
          <external path="boards/lpcxpresso55s16/demo_apps/power_manager_lpc" type="xml">
            <files mask="power_manager_lpc.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_prince" name="prince" brief="This driver example demonstrates how to setup PRINCE driver for the on-the-fly encryption/decryption of data stored in the internal flash memory. It shows how to enable encryption/decryption for specified flash memory address range, how to generate new IV code and how to load the IV code into the PRINCE bus encryption engine. The example also shows how to correctly perform PRINCE region erase and write operations with dummy data." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/prince" path="boards/lpcxpresso55s16/driver_examples/prince">
          <external path="boards/lpcxpresso55s16/driver_examples/prince" type="xml">
            <files mask="prince.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_puf" name="puf" brief="This driver example project demonstrates how to use driver for the PUF controller which provides a secure key storage." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/puf" path="boards/lpcxpresso55s16/driver_examples/puf">
          <external path="boards/lpcxpresso55s16/driver_examples/puf" type="xml">
            <files mask="puf.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_rng_random" name="rng_random" brief="The RNG example project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal. 32 32-bit numbers are read and skipped per one 32-bit number read and used.This is to get a better entropy as suggested by user manual." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/rng" path="boards/lpcxpresso55s16/driver_examples/rng/random">
          <external path="boards/lpcxpresso55s16/driver_examples/rng/random" type="xml">
            <files mask="rng_random.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_rtc_example" name="rtc_example" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/rtc" path="boards/lpcxpresso55s16/driver_examples/rtc">
          <external path="boards/lpcxpresso55s16/driver_examples/rtc" type="xml">
            <files mask="rtc_example.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_sctimer_16bit_counter" name="sctimer_16bit_counter" brief="The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sctimer" path="boards/lpcxpresso55s16/driver_examples/sctimer/16bit_counter">
          <external path="boards/lpcxpresso55s16/driver_examples/sctimer/16bit_counter" type="xml">
            <files mask="sctimer_16bit_counter.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_sctimer_multi_state_pwm" name="sctimer_multi_state_pwm" brief="The SCTImer multi-state project is a demonstration program of the SCTimer state machine. It shows how to set up events to be triggered in a certain stateand transitioning between states.State 0 has 2 events that generate a PWM signal, it also has an event linked to an input signal to transition to State 1.State 1 has 4 events that generate 2 PWM signals, it also has an event linked to an input signal to transition to State 0." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sctimer" path="boards/lpcxpresso55s16/driver_examples/sctimer/multi_state_pwm">
          <external path="boards/lpcxpresso55s16/driver_examples/sctimer/multi_state_pwm" type="xml">
            <files mask="sctimer_multi_state_pwm.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_sctimer_pwm_with_dutycyle_change" name="sctimer_pwm_with_dutycyle_change" brief="This SCTIMer project is a demonstration program of the SDK SCTimer driver's PWM generation. It sets up a PWM signaland periodically updates the PWM signals dutycycle." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sctimer" path="boards/lpcxpresso55s16/driver_examples/sctimer/pwm_with_dutycyle_change">
          <external path="boards/lpcxpresso55s16/driver_examples/sctimer/pwm_with_dutycyle_change" type="xml">
            <files mask="sctimer_pwm_with_dutycyle_change.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_sctimer_simple_pwm" name="sctimer_simple_pwm" brief="The SCTimer project is a simple demonstration program of the SDK SCTimer's driver capabiltiy to generate PWM signals." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sctimer" path="boards/lpcxpresso55s16/driver_examples/sctimer/simple_pwm">
          <external path="boards/lpcxpresso55s16/driver_examples/sctimer/simple_pwm" type="xml">
            <files mask="sctimer_simple_pwm.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_secure_faults_ns" name="secure_faults_ns" brief="The Secure Faults demo application demonstrates handling of different secure faults. This application is based on application Hello World. In addition, user can invoke different secure faults by setting testCaseNumber variable (see source code). This is non-secure part of the application." toolchain="armgcc" compiler="compiler_gcc" category="trustzone_examples" linked_projects="lpcxpresso55s16_secure_faults_s" path="boards/lpcxpresso55s16/trustzone_examples/secure_faults/secure_faults_ns">
          <external path="boards/lpcxpresso55s16/trustzone_examples/secure_faults/secure_faults_ns" type="xml">
            <files mask="secure_faults_ns.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_secure_faults_s" name="secure_faults_s" brief="The Secure Faults demo application demonstrates handling of different secure faults. This application is based on application Hello World. In addition, user can invoke different secure faults by setting testCaseNumber variable (see source code). This is secure part of the application." toolchain="armgcc" compiler="compiler_gcc" category="trustzone_examples" linked_projects="lpcxpresso55s16_secure_faults_ns" path="boards/lpcxpresso55s16/trustzone_examples/secure_faults/secure_faults_s">
          <external path="boards/lpcxpresso55s16/trustzone_examples/secure_faults/secure_faults_s" type="xml">
            <files mask="secure_faults_s.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_secure_gpio_ns" name="secure_gpio_ns" brief="The Secure GPIO demo application demonstrates using of secure GPIO peripheral and GPIO mask feature in AHB secure controller. This is non-secure part of the application." toolchain="armgcc" compiler="compiler_gcc" category="trustzone_examples" linked_projects="lpcxpresso55s16_secure_gpio_s" path="boards/lpcxpresso55s16/trustzone_examples/secure_gpio/secure_gpio_ns">
          <external path="boards/lpcxpresso55s16/trustzone_examples/secure_gpio/secure_gpio_ns" type="xml">
            <files mask="secure_gpio_ns.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_secure_gpio_s" name="secure_gpio_s" brief="The Secure GPIO demo application demonstrates using of secure GPIO peripheral and GPIO mask feature in AHB secure controller. This is secure part of the application." toolchain="armgcc" compiler="compiler_gcc" category="trustzone_examples" linked_projects="lpcxpresso55s16_secure_gpio_ns" path="boards/lpcxpresso55s16/trustzone_examples/secure_gpio/secure_gpio_s">
          <external path="boards/lpcxpresso55s16/trustzone_examples/secure_gpio/secure_gpio_s" type="xml">
            <files mask="secure_gpio_s.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/lpcxpresso55s16/demo_apps/shell">
          <external path="boards/lpcxpresso55s16/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_HS_LSPI_dma_b2b_transfer_master" name="spi_HS_LSPI_dma_b2b_transfer_master" brief="The spi_HS_LSPI_dma_b2b_transfer_master example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_b2b_transfer_slave example.Note: This example will run in master mode, please prepare another board for slave, and the slave       board should be started first.Project Infomation1.How to set the baudrate of SPI?  The baudrate of SPI is easy to set, just make sure the source clock of SPI." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/HS_LSPI_dma_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/HS_LSPI_dma_b2b_transfer/master" type="xml">
            <files mask="spi_HS_LSPI_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_HS_LSPI_dma_b2b_transfer_slave" name="spi_HS_LSPI_dma_b2b_transfer_slave" brief="The spi_HS_LSPI_dma_b2b_transfer_slave example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from master is correct. This example needs to work with spi_HS_LSPI_dma_b2b_transfer_master example." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/HS_LSPI_dma_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/HS_LSPI_dma_b2b_transfer/slave" type="xml">
            <files mask="spi_HS_LSPI_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_dma_b2b_transfer_master" name="spi_dma_b2b_transfer_master" brief="The spi_dma_b2b_transfer_master example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_b2b_transfer_slave example.Note: This example will run in master mode, please prepare another board for slave, and the slave       board should be started first.Project Information1.How to set the baudrate of SPI?  The baudrate of SPI is easy to set, just make sure the source clock of SPI." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/dma_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="spi_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_dma_b2b_transfer_slave" name="spi_dma_b2b_transfer_slave" brief="The spi_dma_b2b_transfer_slave example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from master is correct. This example needs to work with spi_dma_b2b_transfer_master example." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/dma_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="spi_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_interrupt" name="spi_interrupt" brief="The spi_interrupt example shows how to use spi functional API to do interrupt transfer:In this example, one spi instance as master and another spi instance as slave. Master sends a piece of data to slave,and check if the data slave received is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/interrupt" type="xml">
            <files mask="spi_interrupt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_interrupt_b2b_master" name="spi_interrupt_b2b_master" brief="The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b/master">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b/master" type="xml">
            <files mask="spi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_interrupt_b2b_slave" name="spi_interrupt_b2b_slave" brief="The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b/slave" type="xml">
            <files mask="spi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_interrupt_b2b_transfer_master" name="spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="spi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_interrupt_b2b_transfer_slave" name="spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="spi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_polling_b2b_transfer_master" name="spi_polling_b2b_transfer_master" brief="The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/polling_b2b_transfer/master">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/polling_b2b_transfer/master" type="xml">
            <files mask="spi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_spi_polling_b2b_transfer_slave" name="spi_polling_b2b_transfer_slave" brief="The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/spi" path="boards/lpcxpresso55s16/driver_examples/spi/polling_b2b_transfer/slave">
          <external path="boards/lpcxpresso55s16/driver_examples/spi/polling_b2b_transfer/slave" type="xml">
            <files mask="spi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_usart_dma_double_buffer_transfer" name="usart_dma_double_buffer_transfer" brief="This example shows how to use the DMA driver to implement a double buffer receive scheme from the USARTThe example shows the double buffer constructed using two descriptors (g_pingpong_desc). These descriptors are cycled from one to the other.Things to note- The descriptors of the ping pong transfer need to be aligned to size 16- The inital transfer will perform the same job as first descriptor of ping pong, so the first linkeage is to go to g_pingpong_desc[1]- g_pingpong_desc[1] then chains the g_pingpong_desc[0] as the next descriptor- The properties are set up such that g_pingpong_desc[0] (and the initial configuration uses INTA to signal back to the callback)- g_pingpong_desc[1] uses INTB to signal to the callback- The scheduled callback uses this information to know which data was last writtenA note on PerformanceThe intent of this example is to illustrate how a double-buffer scheme can be implemented using the dma. The performance of this example will be limited to how quickly the echo printer can read-out the data from the ping pong buffer and display it. This means that the example will work well if characters are entered at a rate where the DMA callback to echo the string can keep up with the input stream. Connecting the USARTRX to a continuous fast speed will cause the DMA to fall behind. " toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/usart" path="boards/lpcxpresso55s16/driver_examples/usart/dma_double_buffer_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/usart/dma_double_buffer_transfer" type="xml">
            <files mask="usart_dma_double_buffer_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_usart_dma_transfer" name="usart_dma_transfer" brief="The usart_dma example shows how to use usart driver with DMA:In this example, one usart instance connect to PC through usart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/usart" path="boards/lpcxpresso55s16/driver_examples/usart/dma_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/usart/dma_transfer" type="xml">
            <files mask="usart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_usart_interrupt" name="usart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/usart" path="boards/lpcxpresso55s16/driver_examples/usart/interrupt">
          <external path="boards/lpcxpresso55s16/driver_examples/usart/interrupt" type="xml">
            <files mask="usart_interrupt.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_usart_interrupt_rb_transfer" name="usart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/usart" path="boards/lpcxpresso55s16/driver_examples/usart/interrupt_rb_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/usart/interrupt_rb_transfer" type="xml">
            <files mask="usart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_usart_interrupt_transfer" name="usart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/usart" path="boards/lpcxpresso55s16/driver_examples/usart/interrupt_transfer">
          <external path="boards/lpcxpresso55s16/driver_examples/usart/interrupt_transfer" type="xml">
            <files mask="usart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_usart_polling" name="usart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/usart" path="boards/lpcxpresso55s16/driver_examples/usart/polling">
          <external path="boards/lpcxpresso55s16/driver_examples/usart/polling" type="xml">
            <files mask="usart_polling.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_utick_wakeup" name="utick_wakeup" brief="The purpose of this demo is to show wakeup from deep sleep mode using MicroTick timer.The demo sets the MicroTick Timer as a wake up source and puts the device in deep-sleep mode. The MicroTick timer wakes up the device. " toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/lpcxpresso55s16/demo_apps/utick_wakeup">
          <external path="boards/lpcxpresso55s16/demo_apps/utick_wakeup" type="xml">
            <files mask="utick_wakeup.xml"/>
          </external>
        </example>
        <example id="lpcxpresso55s16_wwdt_example" name="wwdt_example" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/wwdt" path="boards/lpcxpresso55s16/driver_examples/wwdt">
          <external path="boards/lpcxpresso55s16/driver_examples/wwdt" type="xml">
            <files mask="wwdt_example.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="LPC55S16" name="LPC55S16" version="1.0.0" full_name="LPC55S16" family="LPC55xx" platform="LPC">
      <description>High Efficiency Arm Cortex-M33-based Microcontroller</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
        <metadata key="compatible_device.segger" value="LPC55S16"/>
      </metadataSet>
      <core id="cm33_core0_LPC55S16" name="cm33_core0" fpu="true" type="cm33" dsp="true"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_LPC55S16" name="PROGRAM_FLASH" addr="00000000" size="00038000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_LPC55S16" name="SRAM" addr="20000000" size="00010000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_LPC55S16" name="USB_RAM" addr="20010000" size="00004000" type="RAM" access="RW"/>
        <memoryBlock id="SRAMX_LPC55S16" name="SRAMX" addr="04000000" size="00004000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="224" ram_size_kb="96"/>
      <package id="LPC55S16JBD100" name="LPC55S16JBD100"/>
      <package id="LPC55S16JEV98" name="LPC55S16JEV98"/>
      <package id="LPC55S16JBD64" name="LPC55S16JBD64"/>
      <evaluation_boards>
        <evaluation_board name="lpcxpresso55s16"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.LPC55S16" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.LPC55S16" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.LPC55S16" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.LPC55S16" name="internal.has_swo" value="true"/>
            <params id="misc.options.LPC55S16" name="misc.options" value="--bootromstall 0x50000040"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_LPC55S16">
              <driverBinary type="binary">
                <files mask="LPC551x.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.lpcxpresso55s16.LPC55S16" name="lpcxpresso55s16" brief="Board_project_template lpcxpresso55s16" version="1.0.0" full_name="Board_project_template lpcxpresso55s16" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.LPC55S16"/>
          <component_dependency value="component.serial_manager.LPC55S16"/>
          <component_dependency value="component.usart_adapter.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_iocon.LPC55S16"/>
          <component_dependency value="platform.drivers.power.LPC55S16"/>
          <component_dependency value="platform.drivers.reset.LPC55S16"/>
          <component_dependency value="platform.drivers.clock.LPC55S16"/>
          <component_dependency value="device.LPC55S16_startup.LPC55S16"/>
        </all>
      </dependencies>
      <source path="boards/lpcxpresso55s16/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/lpcxpresso55s16/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.LPC55S16" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="LPC55S16" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.LPC55S16"/>
          <component_dependency value="platform.Include_dsp.LPC55S16"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="Driver/DriverTemplates" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.LPC55S16" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC55S16" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.LPC55S16" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.LPC55S16" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.LPC55S16" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC55S16" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.LPC55S16" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.LPC55S16" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.LPC55S16" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC55S16" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC55S16" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC55S16" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.LPC55S16" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.LPC55S16" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.LPC55S16" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="LPC55S16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.LPC55S16" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="LPC55S16" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm33.LPC55S16" name="CMSIS_Include_core_cm33" brief="Cmsis_include_core_cm33" version="5.3.0" full_name="Cmsis_include_core_cm33" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.LPC55S16"/>
          <component_dependency value="platform.Include_dsp.LPC55S16"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.LPC55S16" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="LPC55S16" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="COPY_BSD_License.LPC55S16" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="LPC55S16" user_visible="true" type="other">
      <source path="." target_path="src" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.LPC55S16.LPC55S16" name="LPC55S16" brief="Devices_project_template LPC55S16" version="1.0.0" full_name="Devices_project_template LPC55S16" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.LPC55S16"/>
          <component_dependency value="component.usart_adapter.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_iocon.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_spi.LPC55S16"/>
          <component_dependency value="platform.drivers.power.LPC55S16"/>
          <component_dependency value="platform.drivers.reset.LPC55S16"/>
          <component_dependency value="device.LPC55S16_startup.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="utility.debug_console.LPC55S16"/>
          <component_dependency value="platform.drivers.clock.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/LPC55S16/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.LPC55S16" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <component_dependency value="platform.drivers.lpc_dma.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.LPC55S16" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="LPC55S16" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.LPC55S16" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.timer_manager.LPC55S16"/>
          <component_dependency value="component.lpc_gpio_adapter.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.codec_cs42888_adapter.LPC55S16" name="codecs_cs42888_adapter" brief="Component cs42888 adapter for multi codecs" version="2.2.1" full_name="Component codec_cs42888_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_cs42888_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_cs42888_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_da7212_adapter.LPC55S16" name="codecs_da7212_adapter" brief="Component da7212 adapter for multi codecs" version="2.2.0" full_name="Component codec_da7212_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_da7212_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_da7212_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_i2c.LPC55S16" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.flexcomm_i2c_adapter.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/i2c" target_path="codec" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source path="components/codec/i2c" target_path="codec" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
    </component>
    <component id="component.codec_sgtl_adapter.LPC55S16" name="codecs_sgtl_adapter" brief="Component sgtl5000 adapter for multi codecs" version="2.2.0" full_name="Component codec_sgtl_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
        <files mask="fsl_sgtl_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
        <files mask="fsl_sgtl_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_wm8904_adapter.LPC55S16" name="codecs_wm8904_adapter" brief="Component wm8904 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8904_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
        <files mask="fsl_wm8904_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
        <files mask="fsl_wm8904_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_wm8960_adapter.LPC55S16" name="codecs_wm8960_adapter" brief="Component wm8960 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8960_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
        <files mask="fsl_wm8960_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
        <files mask="fsl_wm8960_adapter.h"/>
      </source>
    </component>
    <component id="component.common_task.LPC55S16" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.osa.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.cs42888_adapter.LPC55S16" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port/cs42888" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/cs42888" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.ctimer_adapter.LPC55S16" name="ctimer_adapter" brief="Component ctimer_adapter" version="1.0.0" full_name="Component ctimer_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.ctimer.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="ctimer_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.da7212_adapter.LPC55S16" name="codec_da7212_adapter" brief="Component da7212 adapter for single codec" version="2.2.0" full_name="Component da7212_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port/da7212" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/da7212" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.flexcomm_i2c_adapter.LPC55S16" name="flexcomm_i2c_adapter" brief="Component flexcomm_i2c_adapter" version="1.0.0" full_name="Component flexcomm_i2c_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/i2c" target_path="component/i2c" type="src">
        <files mask="flexcomm_i2c_adapter.c"/>
      </source>
      <source path="components/i2c" target_path="component/i2c" type="c_include">
        <files mask="i2c.h"/>
      </source>
    </component>
    <component id="component.gint_adapter.LPC55S16" name="gint_adapter" brief="Component gint_adapter" version="1.0.0" full_name="Component gint_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.gint.LPC55S16"/>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gint_adapter.c"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
    </component>
    <component id="component.led.LPC55S16" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.timer_manager.LPC55S16"/>
          <component_dependency value="component.lpc_gpio_adapter.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.LPC55S16" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lpc_crc_adapter.LPC55S16" name="lpc_crc_adapter" brief="Component lpc_crc_adapter" version="1.0.0" full_name="Component lpc_crc_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_crc.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="lpc_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.lpc_gpio_adapter.LPC55S16" name="lpc_gpio_adapter" brief="Component lpc_gpio_adapter" version="1.0.0" full_name="Component lpc_gpio_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpc_gpio.LPC55S16"/>
          <component_dependency value="platform.drivers.inputmux.LPC55S16"/>
          <component_dependency value="platform.drivers.pint.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="lpc_gpio_adapter.c"/>
      </source>
    </component>
    <component id="component.mem_manager.LPC55S16" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.lists.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.mrt_adapter.LPC55S16" name="mrt_adapter" brief="Component mrt_adapter" version="1.0.0" full_name="Component mrt_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.mrt.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="mrt_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.osa.LPC55S16" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.lists.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.LPC55S16" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.LPC55S16" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
    </component>
    <component id="component.osa_bm.LPC55S16" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.lists.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.panic.LPC55S16" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="utility.debug_console.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pwm_ctimer_adapter.LPC55S16" name="pwm_ctimer_adapter" brief="Component pwm_ctimer_adapter" version="1.0.0" full_name="Component pwm_ctimer_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.ctimer.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_ctimer_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.LPC55S16" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.lists.LPC55S16"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.LPC55S16"/>
            <component_dependency value="component.serial_manager_swo.LPC55S16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_swo.LPC55S16" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.serial_manager.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_swo.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_swo.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.LPC55S16" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.sgtl_adapter.LPC55S16" name="codec_sgtl_adapter" brief="Component sgtl5000 adapter for single codec" version="2.2.0" full_name="Component sgtl_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port/sgtl5000" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/sgtl5000" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.LPC55S16" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.LPC55S16" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.lists.LPC55S16"/>
          <any_of>
            <component_dependency value="component.ctimer_adapter.LPC55S16"/>
            <component_dependency value="component.mrt_adapter.LPC55S16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.usart_adapter.LPC55S16" name="usart_adapter" brief="Component usart_adapter" version="1.0.0" full_name="usart_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="usart_adapter.c"/>
      </source>
    </component>
    <component id="component.wm8904_adapter.LPC55S16" name="codec_wm8904_adapter" brief="Component wm8904 adapter for single codec" version="2.2.0" full_name="Component wm8904_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port/wm8904" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/wm8904" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.wm8960_adapter.LPC55S16" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.LPC55S16"/>
          <component_dependency value="driver.codec.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/port/wm8960" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/wm8960" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="device.LPC55S16_CMSIS.LPC55S16" name="LPC55S16_CMSIS" brief="Device LPC55S16_cmsis" version="1.0.0" full_name="Device LPC55S16_cmsis" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm33.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16" target_path="device" type="c_include">
        <files mask="LPC55S16.h"/>
        <files mask="LPC55S16_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="platform.devices.LPC55S16_debugger.LPC55S16" name="LPC55S16_debugger" brief="Device LPC55S16_debugger" version="1.0.0" full_name="Device LPC55S16_debugger" devices="LPC55S16" user_visible="true" type="debugger">
      <source path="devices/LPC55S16" target_path="svd" type="xml">
        <files mask="LPC55S16.xml"/>
      </source>
    </component>
    <component id="platform.devices.LPC55S16_linker.LPC55S16" name="LPC55S16_linker" brief="Device LPC55S16_linker" version="1.0.0" full_name="Device LPC55S16_linker" devices="LPC55S16" user_visible="true" type="linker">
      <source toolchain="armgcc" path="devices/LPC55S16/gcc" target_path="LPC55S16/gcc" type="linker">
        <files mask="LPC55S16_flash.ld"/>
        <files mask="LPC55S16_ram.ld"/>
      </source>
    </component>
    <component id="device.LPC55S16_startup.LPC55S16" name="LPC55S16_startup" brief="Device LPC55S16_startup" version="1.1.0" full_name="Device LPC55S16_startup" devices="LPC55S16" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="armgcc" path="devices/LPC55S16/gcc" target_path="startup" type="asm_include">
        <files mask="startup_LPC55S16.S"/>
      </source>
      <source path="devices/LPC55S16" target_path="device" type="src">
        <files mask="system_LPC55S16.c"/>
      </source>
      <source path="devices/LPC55S16" target_path="device" type="c_include">
        <files mask="system_LPC55S16.h"/>
      </source>
    </component>
    <component id="docs.LPC55S16.LPC55S16" name="LPC55S16" brief="Docs lpc55s16" version="1.0.0" full_name="Docs lpc55s16" devices="LPC55S16" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for LPCXpresso55S16.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for LPCXpresso55S16.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.anactrl.LPC55S16" name="anactrl" brief="anactrl Driver" version="2.1.1" full_name="anactrl Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_anactrl.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_anactrl.h"/>
      </source>
    </component>
    <component id="platform.drivers.casper.LPC55S16" name="casper" brief="CASPER Driver" version="2.0.10" full_name="CASPER Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_casper.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_casper.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.LPC55S16" name="clock" brief="Clock Driver" version="2.3.3" full_name="Clock Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp_1.LPC55S16" name="cmp_1" brief="cmp_1 Driver" version="2.2.0" full_name="cmp_1 Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2c_cmsis.LPC55S16" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.0" full_name="I2C CMSIS Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_i2c_dma.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC55S16"/>
          <component_dependency value="RTE_Device.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/LPC55S16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_spi_cmsis.LPC55S16" name="spi_cmsis" brief="SPI CMSIS Driver" version="2.0.1" full_name="SPI CMSIS Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_spi_dma.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC55S16"/>
          <component_dependency value="RTE_Device.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_cmsis.c"/>
      </source>
      <source path="devices/LPC55S16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_usart_cmsis.LPC55S16" name="usart_cmsis" brief="USART CMSIS Driver" version="2.0.0" full_name="USART CMSIS Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_usart_dma.LPC55S16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC55S16"/>
          <component_dependency value="RTE_Device.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_usart_cmsis.c"/>
      </source>
      <source path="devices/LPC55S16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usart_cmsis.h"/>
      </source>
    </component>
    <component id="driver.codec.LPC55S16" name="codec" brief="Driver codec" version="2.2.0" full_name="Driver codec" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <any_of>
            <component_dependency value="component.wm8904_adapter.LPC55S16"/>
            <component_dependency value="component.codec_cs42888_adapter.LPC55S16"/>
            <component_dependency value="component.codec_da7212_adapter.LPC55S16"/>
            <component_dependency value="component.codec_sgtl_adapter.LPC55S16"/>
            <component_dependency value="component.codec_wm8960_adapter.LPC55S16"/>
            <component_dependency value="component.codec_wm8904_adapter.LPC55S16"/>
            <component_dependency value="component.cs42888_adapter.LPC55S16"/>
            <component_dependency value="component.da7212_adapter.LPC55S16"/>
            <component_dependency value="component.sgtl_adapter.LPC55S16"/>
            <component_dependency value="component.wm8960_adapter.LPC55S16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/codec" target_path="codec" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source path="components/codec" target_path="codec" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.LPC55S16" name="common" brief="COMMON Driver" version="2.2.4" full_name="COMMON Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.LPC55S16"/>
          <component_dependency value="device.LPC55S16_CMSIS.LPC55S16"/>
          <component_dependency value="platform.drivers.reset.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="driver.cs42888.LPC55S16" name="cs42888" brief="Driver cs42888" version="2.1.1" full_name="Driver cs42888" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.codec_i2c.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/cs42888" target_path="codec" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <source path="components/codec/cs42888" target_path="codec" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
    </component>
    <component id="platform.drivers.ctimer.LPC55S16" name="ctimer" brief="CTimer Driver" version="2.0.3" full_name="CTimer Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ctimer.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ctimer.h"/>
      </source>
    </component>
    <component id="platform.drivers.cwt.LPC55S16" name="cwt" brief="CWT Driver" version="2.0.1" full_name="CWT Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_cwt.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cwt.h"/>
      </source>
    </component>
    <component id="driver.dialog7212.LPC55S16" name="dialog7212" brief="Driver dialog7212" version="2.2.0" full_name="Driver dialog7212" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.codec_i2c.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/da7212" target_path="codec" type="src">
        <files mask="fsl_dialog7212.c"/>
      </source>
      <source path="components/codec/da7212" target_path="codec" type="c_include">
        <files mask="fsl_dialog7212.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm.LPC55S16" name="flexcomm" brief="FLEXCOMM Driver" version="2.0.2" full_name="FLEXCOMM Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcomm.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcomm.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2c.LPC55S16" name="i2c" brief="I2C Driver" version="2.0.8" full_name="FLEXCOMM I2C Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2c_dma.LPC55S16" name="i2c_dma" brief="I2C Driver" version="2.0.8" full_name="FLEXCOMM I2C DMA Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2s.LPC55S16" name="flexcomm_i2s" brief="I2S Driver" version="2.2.1" full_name="FLEXCOMM I2S Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2s.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2s.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2s_dma.LPC55S16" name="flexcomm_i2s_dma" brief="I2S Driver" version="2.1.0" full_name="FLEXCOMM I2S DMA Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_i2s.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2s_dma.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2s_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_spi.LPC55S16" name="spi" brief="SPI Driver" version="2.1.1" full_name="FLEXCOMM SPI Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_spi_dma.LPC55S16" name="spi_dma" brief="SPI Driver" version="2.1.1" full_name="FLEXCOMM SPI DMA Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_spi.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_usart.LPC55S16" name="usart" brief="USART Driver" version="2.2.0" full_name="FLEXCOMM USART Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_usart.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_usart_dma.LPC55S16" name="usart_dma" brief="USART Driver" version="2.2.0" full_name="FLEXCOMM USART DMA Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC55S16"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC55S16"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_usart_dma.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usart_dma.h"/>
      </source>
    </component>
    <component id="driver.ft6x06.LPC55S16" name="ft6x06" brief="Driver ft6x06" version="1.0.0" full_name="Driver ft6x06" devices="LPC55S16" user_visible="false" type="board_component">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC55S16"/>
      </dependencies>
      <source path="components/ft6x06" target_path="touchpanel" type="src">
        <files mask="fsl_ft6x06.c"/>
      </source>
      <source path="components/ft6x06" target_path="touchpanel" type="c_include">
        <files mask="fsl_ft6x06.h"/>
      </source>
    </component>
    <component id="platform.drivers.gint.LPC55S16" name="gint" brief="GINT Driver" version="2.0.3" full_name="GINT Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_gint.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gint.h"/>
      </source>
    </component>
    <component id="platform.drivers.hashcrypt.LPC55S16" name="hashcrypt" brief="Hashcrypt Driver" version="2.1.3" full_name="Hashcrypt Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_hashcrypt.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_hashcrypt.h"/>
      </source>
    </component>
    <component id="platform.drivers.iap1.LPC55S16" name="iap1" brief="FLASHIAP Driver" version="2.1.0" full_name="IAP Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_iap.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_iap.h"/>
        <files mask="fsl_iap_ffr.h"/>
        <files mask="fsl_iap_kbp.h"/>
        <files mask="fsl_iap_skboot_authenticate.h"/>
      </source>
    </component>
    <component id="driver.ili9341.LPC55S16" name="ili9341" brief="Driver ili9341" version="1.0.0" full_name="Driver ili9341" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="board_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="components/ili9341" target_path="lcd" type="src">
        <files mask="fsl_ili9341.c"/>
      </source>
      <source path="components/ili9341" target_path="lcd" type="c_include">
        <files mask="fsl_ili9341.h"/>
      </source>
    </component>
    <component id="platform.drivers.inputmux.LPC55S16" name="inputmux" brief="INPUTMUX Driver" version="2.0.3" full_name="INPUTMUX Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.inputmux_connections.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
    </component>
    <component id="platform.drivers.inputmux_connections.LPC55S16" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpadc.LPC55S16" name="lpadc" brief="LPADC Driver" version="2.2.0" full_name="LPADC Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_crc.LPC55S16" name="lpc_crc" brief="CRC Driver" version="2.0.2" full_name="CRC Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_dma.LPC55S16" name="dma" brief="DMA Driver" version="2.4.1" full_name="DMA Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_gpio.LPC55S16" name="gpio" brief="GPIO Driver" version="2.1.6" full_name="GPIO Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_iocon.LPC55S16" name="iocon" brief="IOCON Driver" version="2.1.1" full_name="IOCON Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_iocon.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_rtc.LPC55S16" name="lpc_rtc" brief="RTC Driver" version="2.1.2" full_name="RTC Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.mcan.LPC55S16" name="mcan" brief="MCAN Driver" version="2.1.3" full_name="MCAN Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_mcan.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mcan.h"/>
      </source>
    </component>
    <component id="platform.drivers.mrt.LPC55S16" name="mrt" brief="MRT Driver" version="2.0.3" full_name="MRT Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
    </component>
    <component id="platform.drivers.ostimer.LPC55S16" name="ostimer" brief="OSTimer Driver" version="2.1.2" full_name="OSTimer Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ostimer.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ostimer.h"/>
      </source>
    </component>
    <component id="platform.drivers.pint.LPC55S16" name="pint" brief="PINT Driver" version="2.1.8" full_name="PINT Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pint.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
    </component>
    <component id="platform.drivers.plu.LPC55S16" name="plu" brief="PLU Driver" version="2.2.1" full_name="PLU Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_plu.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_plu.h"/>
      </source>
    </component>
    <component id="platform.drivers.power.LPC55S16" name="power" brief="Power driver with Power Lib Hard ABI" version="2.0.0" full_name="power" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source toolchain="armgcc" path="devices/LPC55S16/gcc" target_path="libs" type="lib" device_cores="cm33_core0_LPC55S16">
        <files mask="libpower_hardabi.a"/>
      </source>
      <source toolchain="armgcc" path="devices/LPC55S16/gcc" target_path="libs" type="other" device_cores="cm33_core0_LPC55S16">
        <files mask="libpower_softabi.a" hidden="true"/>
      </source>
    </component>
    <component id="platform.drivers.power_s.LPC55S16" name="power_s" brief="Secure Power driver with Power Lib Hard ABI" version="2.0.0" full_name="power_s" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source toolchain="armgcc" path="devices/LPC55S16/gcc" target_path="libs" type="lib" device_cores="cm33_core0_LPC55S16">
        <files mask="libpower_hardabi_s.a"/>
      </source>
      <source toolchain="armgcc" path="devices/LPC55S16/gcc" target_path="libs" type="other" device_cores="cm33_core0_LPC55S16">
        <files mask="libpower_softabi_s.a" hidden="true"/>
      </source>
    </component>
    <component id="platform.drivers.prince.LPC55S16" name="PRINCE" brief="PRINCE Driver" version="2.3.0" full_name="PRINCE Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="platform.drivers.puf.LPC55S16"/>
          <component_dependency value="platform.drivers.iap1.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_prince.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_prince.h"/>
      </source>
    </component>
    <component id="platform.drivers.puf.LPC55S16" name="PUF" brief="PUF Driver" version="2.1.3" full_name="PUF Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_puf.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_puf.h"/>
      </source>
    </component>
    <component id="platform.drivers.reset.LPC55S16" name="reset" brief="Reset Driver" version="2.0.1" full_name="Reset Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
    </component>
    <component id="platform.drivers.rng_1.LPC55S16" name="rng" brief="RNG Driver" version="2.0.1" full_name="RNG Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_rng.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rng.h"/>
      </source>
    </component>
    <component id="platform.drivers.sctimer.LPC55S16" name="sctimer" brief="SCT Driver" version="2.2.0" full_name="SCT Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_sctimer.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sctimer.h"/>
      </source>
    </component>
    <component id="driver.sgtl5000.LPC55S16" name="sgtl5000" brief="Driver sgtl5000" version="2.1.0" full_name="Driver sgtl5000" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.codec_i2c.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/sgtl5000" target_path="codec" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <source path="components/codec/sgtl5000" target_path="codec" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
    </component>
    <component id="platform.drivers.sysctl.LPC55S16" name="sysctl" brief="SYSCTL Driver" version="2.0.5" full_name="SYSCTL Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_sysctl.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sysctl.h"/>
      </source>
    </component>
    <component id="platform.drivers.utick.LPC55S16" name="utick" brief="UTICK Driver" version="2.0.4" full_name="UTICK Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_utick.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_utick.h"/>
      </source>
    </component>
    <component id="driver.wm8904.LPC55S16" name="wm8904" brief="Driver wm8904" version="2.4.1" full_name="Driver wm8904" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.codec_i2c.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/wm8904" target_path="codec" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <source path="components/codec/wm8904" target_path="codec" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
    </component>
    <component id="driver.wm8960.LPC55S16" name="wm8960" brief="Driver wm8960" version="2.1.1" full_name="Driver wm8960" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
          <component_dependency value="component.codec_i2c.LPC55S16"/>
        </all>
      </dependencies>
      <source path="components/codec/wm8960" target_path="codec" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <source path="components/codec/wm8960" target_path="codec" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
    </component>
    <component id="platform.drivers.wwdt.LPC55S16" name="wwdt" brief="WWDT Driver" version="2.1.7" full_name="WWDT Driver" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source path="devices/LPC55S16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.LPC55S16" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="LPC55S16" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.usb.common_header.LPC55S16" name="USB Common Header" brief="Middleware usb common_header" version="2.6.0" full_name="USB Common Header" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" category="USB/USB Common Header" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="component.osa.LPC55S16"/>
      </dependencies>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
    </component>
    <component id="middleware.usb.device.common_header.LPC55S16" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.6.0" full_name="USB Device Common Header" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" category="USB/USB Device" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="component.osa.LPC55S16"/>
          <component_dependency value="middleware.usb.common_header.LPC55S16"/>
        </all>
      </dependencies>
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.LPC55S16" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="LPC55S16" user_visible="true" type="utilities">
      <source toolchain="armgcc" path="devices/LPC55S16/utilities" target_path="utilities" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert.LPC55S16" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.LPC55S16" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/LPC55S16/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/LPC55S16/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/LPC55S16/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.LPC55S16" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC55S16"/>
      </dependencies>
      <source path="devices/LPC55S16/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/LPC55S16/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.LPC55S16" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="LPC55S16" device_cores="cm33_core0_LPC55S16" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.LPC55S16"/>
          <component_dependency value="component.lists.LPC55S16"/>
          <component_dependency value="platform.drivers.common.LPC55S16"/>
        </all>
      </dependencies>
      <source path="devices/LPC55S16/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/LPC55S16/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
